<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[论自己的桌面工作环境]]></title>
    <url>%2F2018%2F08%2F20%2F%E8%AE%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E6%A1%8C%E9%9D%A2%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[过去一段时间一直有点执拗，觉得linux大法好，新买的电脑因为驱动不兼容等各种原因，安装过archlinux,ubuntu,kalilinux,centos等等，最后安装的linuxmint对自己的电脑兼容最好，即使是如此，对于桌面环境，我用的xfce,还是重装了好几遍。 使用linux，少不得需要一颗爱折腾的心。不过现实是没那么多时间，今天看了freeBSD吧上说的，觉得挺有道理。论使用便宜程度，windows下的记事本要比VIM好太多。图形化的操作发展，就是为了提升人的工作效率。vim存在于那个命令行年代，没有鼠标，有其存在背景。 没有必要带着LINUX优越感，看不起Windows下的盗版之类的。开源的含义意味着自由。事实上现在的linux的桌面环境还是要比windows,MAX OX 差很多。LINUX的核心在于内核，也就是UNIX的翻版。 基于此，个人以后主设备用windows7,也可以打游戏，其次旧电脑用freebsd用于学习UNIX,服务器环境用LINUX.]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[敏捷学习]]></title>
    <url>%2F2018%2F08%2F16%2F%E6%95%8F%E6%8D%B7%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[我们的一般外包公司的整个开发流程，都是前期确定需求文档，设计制作页面，最后交由技术代码实现，每一个步骤，必须由前一项工作完成，才能开始工作。前一项工作是基础，为后一项开展工作， 提供必要得前提。这种模式一般称为瀑布流模式。 而敏捷开发，则是将需求分为无数个小的需求点，进行迭代，适用于需求变化比较大的，并且可以容忍出错的项目开发。 以此引申出的敏捷学习，许多时候，比方说刚入职一家公司的新手程序员，公司并不可能会给你学习的机会，你得为了你得工资实现对应的价值。学习途径，包括有师傅带你，自己看书，业务买整套从入门到精通教程。如若是全套的，必定时间跨度长。如果是零星的，必定不成体系。若是等一切都准备停当，再去开始，黄花菜都凉了。 想在一个环境快速适应，就需要立即上手，而不应该等待各种准备工作。核心就是不停的迭代，先从整体上的去把握需要的知识点，不求知其所以然，有个基础认识即可。在此基础进一步实现各个击破，以达到最终目标。过程当中更容易获得正反馈，获得动力向目标推动。]]></content>
      <categories>
        <category>敏捷</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[线性表]]></title>
    <url>%2F2018%2F08%2F14%2F%E7%BA%BF%E6%80%A7%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[线性表：零个或多个数据元素的有限序列。 栈：限定尽在表尾进行插入和删除操作的线性表 队列：只允许在一端进行插入操作、而在另一端进行删除操作的线性表。 栈（stack）：把允许插入和删除的一端称为栈顶（top），另一端称为栈底（button），不含任何数据元素的栈称为空栈。栈又称为后进先出（Last In First Out）的线性表，简称LIFO结构。 栈： 始终在栈顶进行插入、删除。栈底是固定的，最新进栈的只能在栈底。 栈的插入操作，叫做进栈，也称压栈、入栈。 栈的删除操作，叫做出栈，也有的叫弹栈。 把一个直接调用自己或通过一系列的调用语句间接地调用自己的函数，称作递归函数。 队列是一种先进先出（First In First Out）的线性表，简称FIFO。允许插入的一端称为队尾，允许删除的一端称为队头。]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[数据结构]]></title>
    <url>%2F2018%2F08%2F13%2F%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[《大话数据结构》摘抄 what? 1，数据结构 （1.） 对某类问题解决方案的过程描述，一系列计算步骤。 数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及它们之间的关系和操作等相关问题的学科。 程序 = 数据结构 + 算法 数据：是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。 数据元素：是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理。也被称为记录。 数据项： 一个数据元素可以由若干个数据项组成。 数据项是数据不可分割的最小单位。 数据对象：是性质相同的数据元素的集合，是数据的子集。 结构： 是相互之间存在一种或多种特定关系的数据元素的集合。 （2.）逻辑结构和物理结构 a.逻辑结构： 是指数据对象中数据元素之间的相互关系。 集合结构：集合结构中的数据元素除了同属于一个集合外，它们之间没有其他关系。 线性结构： 线性结构中的数据元素之间是一对一的关系。 树形结构：树形结构中的数据元素之间存在一种一对多的层次关系。 图形结构：图形结构的数据元素是多对多的关系。 b.物理结构：（存储结构） 是指数据的逻辑结构在计算机中的存储形式。 顺序存储：是把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。 链式存储结构： 是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。 （3.）抽象数据类型 数据类型：是指一组性质相同的值的集合及在此集合上的一些操作的总称。 抽象是指抽取出事物具有的普遍性的本质。 抽象数据类型：是指一个数学模型及定义在该模型上的一组操作。 “抽象”的意义在于数据类型的数学抽象特性。 抽象数据类型体现了程序设计中问题分解、抽象和信息隐藏的特性。 2,算法 算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。 （1.）算法基本特性：输入、输出、有穷性、确定性和可行性。 算法具有零个或多个输入，至少有一个或多个输出。 有穷性：指算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每一个步骤在可接受的时间内完成。 确定性：算法的每一步都具有确定的含义，不会出现二义性。 可行性：算法的每一步都必须是可行的，也就是说，每一步都能通过执行有限次数完成。 （2.）算法设计的要求 正确性：算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案。 可读性：算法设计的另一目的是为了便于阅读、理解和交流。 健壮性：当输入数据不合法时，算法也能做出相关处理，而不是产生异常或莫名其妙的结果。 时间效率高和存储量低 （3.）算法效率的度量方法 事后统计方法：这种方式主要是通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。 事前分析估算方法：在计算机程序编制前，依据统计方法对算法进行估算。 一个程序的运行时间，依赖于算法的好坏和问题的输入规模。问题输入规模指输入量的多少。]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[linuxmint 安装配置]]></title>
    <url>%2F2018%2F08%2F01%2Flinuxmint-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[昨天打算尝试下在笔记本搞爬虫。由于不知道系统内置python2.7,是因为有许多软件依赖他。我一时卸载掉python2.7,安装python3.5,删除许多依赖，导致开机进不了桌面，甚至命令行窗口都是黑屏没有命令提示符。没办法，我选择重装。 这里记录下每次重装都要做的几项配置，省的每次都要百度。 系统：linuxmint xfce4 1，中文输入法 2，shadowsocks 安装 3, chrome 安装 4, gtk主题和图标 numix screenfetch 5, docker安装 6，tmux oh-my-zsh 7, phpstorm 安装 8，JAVA JDK 9, eclipse]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[网站短信验证码的解决方案]]></title>
    <url>%2F2018%2F07%2F28%2F%E7%BD%91%E7%AB%99%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[用户点击验证码获取请求，后台调用第三方接口发送验证码，并将手机号和验证码以及发送时间记录下来，在用户提交的时候进行验证是否一致，以及是否过期失效的问题。过去我所在的地方就是采用存入数据库记录。仅此而已，在现在公司看到的项目就更细致了一些。1，区分线测试和线上环境，如果是测试环境则不调用接口发送请求。2，设置一个请求的白名单，记录当前进行请求的控制器名和方法名，如果是其他地方调用，则判定为非法请求。（安全考虑）3，通过缓存设置用户当天可以发送短信的次数，以及60秒发送一次。4，手机号，验证码，发送时间，存入session。]]></content>
      <categories>
        <category>工作</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[开发规范管理]]></title>
    <url>%2F2018%2F07%2F28%2F%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[每天产出一点东西，就多一点进步。 感觉这次离职真是太对了，在上一家公司来讲，长期处于这样一种阶段，没有好的行业实践可以参考，大部分的逻辑都是自己临时想。其中不免显得拙劣而无所得。 以往我们开发的方式，一般就是两种。第一种完全用的本地phpstudy的集成环境开发，开发完再部署到线上。第二种则是使用SVN，git等管理工具上传到线上测试服务器环境进行开发。 其中的粗糙更让自己觉得是野路子出身。 现在公司我接触的项目，使用的是两种结合的方式，线上和线下同时存在，通过在nginx的配置文件定义变量，fastcgi_param PHALCON_ENV “dev”，并在脚本做判断线上线下进行判断。基于本地开发，通过后再上传到线上，不至于像我之前开发，前端那边修改完，都需要我来上传一下到线上，来查看效果，极其繁琐。在一个就是资源的利用上，登录注册会用到的短信，如果是线下就不需要调用接口，直接发送随机数，F12就可以查看到，节省资源。此外就是如果是已经上线的项目，通过这种方式，本地测试通过后再部署到线上要更安全些。]]></content>
      <categories>
        <category>工作</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[thinkphp5常用功能记录]]></title>
    <url>%2F2018%2F07%2F26%2Fthinkphp5%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[1,扩展请求类 \think\Request 用于请求微信接口，短信接口等第三方接口。1234567891011121314151617181920212223242526272829303132333435363738/** * 设置当前请求绑定的对象实例 * @access public * @param string $url 请求地址 * @param bool $https 是否https协议 * @param string $method 请求方式 * @param array $data 请求数据 * @return json */ public function send($url, $https=true, $method=&apos;get&apos;, $data=null) &#123; //初始化curl $ch = curl_init($url); //字符串不直接输出，进行一个变量的存储 curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); //https请求 if ($https === true) &#123; //确保https请求能够请求成功 curl_setopt($ch,CURLOPT_SSL_VERIFYPEER,false); curl_setopt($ch,CURLOPT_SSL_VERIFYHOST,false); &#125; //post请求 if ($method == &apos;post&apos;) &#123; curl_setopt($ch,CURLOPT_POST,true); curl_setopt($ch,CURLOPT_POSTFIELDS,$data); &#125; //发送请求 $str = curl_exec($ch); $aStatus = curl_getinfo($ch); //关闭连接 curl_close($ch); if(intval($aStatus[&quot;http_code&quot;])==200)&#123; // return json_decode($str); return $str; &#125;else&#123; return false; &#125; &#125; 使用方法：$res= Request::instance()-&gt;send($url, true, &#39;get&#39;); 2，表单提交时检测变量是否设置。 写法不一样，突然看到另一种写法懵圈了。 用has检测:Request::instance()-&gt;has(&#39;id&#39;,&#39;get&#39;); 助手函数：input(&#39;?get.id&#39;); input(&#39;?post.name&#39;); 3,表单提交用于获取变量。 (1).parm 自动识别多种请求 1234// 获取当前请求的name变量Request::instance()-&gt;param(&apos;name&apos;);// 获取当前请求的所有变量（经过过滤）Request::instance()-&gt;param(); (2) 助手函数12input(&apos;name&apos;);input(&apos;&apos;); 4,]]></content>
      <categories>
        <category>工作</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[随笔-观念]]></title>
    <url>%2F2018%2F07%2F26%2F%E9%9A%8F%E7%AC%94-%E8%A7%82%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[看到一篇程序员观念错误的文章，三个观点：1，“别管我，我只想一个人安静地写代码！”很赞同，大多数工作都需要与人打交道。程序员不只是需要确认需求的沟通，接收测试BUG.2，“这不关我的事！”这个深有体会，的确做这些事情可以锻炼到自己，可是待遇不够，被当做苦力，不考虑自己的付出，是对自己的残忍。我理解，从产品经理的角度来讲，我们每个人自己就是一个产品，需要打磨自己的各种能力。3，应该以发展作为第一追求，薪资是其次。片面追求薪资而忽视发展，是短视，不可持续发展。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[随笔-进阶]]></title>
    <url>%2F2018%2F07%2F26%2F%E9%9A%8F%E7%AC%94-%E8%BF%9B%E9%98%B6%2F</url>
    <content type="text"><![CDATA[之前写的不在了，但也没关系，彼时的境况所确立的东西，现如今已是另一种状态了。 可能我们这一类入门开始就待的小型外包公司的通病，就是基础不扎实，下一阶段对于PHP的函数库，面向对象设计模式，需要重新过一遍。 其次，自己的代码规范再过一遍。 其次，几个类型项目最佳实践。 说白了，就是把各项基础重头再来一遍，shell脚本，nginx,apache,mysql,mvc. 进行几遍迭代，夯实下基础。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[随笔-管理]]></title>
    <url>%2F2018%2F07%2F26%2F%E9%9A%8F%E7%AC%94-%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[其实不只是管理角度，作为一名开发人员，项目进度把控也是自己的一项必修课。 其次，之前总结的不在了，还记得就是，程序员开发工作几年下来，更多的就是业务熟练度和对各种业务逻辑理解上。作为一个管理，自然这也是必须的基础之一，包含行业的最佳实践。 其次，参与项目中去，才能把控开发人员的进度和难点。 其次，每个人的代码规范，管理角度来讲，可以降低团队沟通的成本，优秀的而统一的代码规范，包括变量名等有意义的命名，排版，易于阅读。 再其次，架构设计，结构化编程，面向对象，这是关乎代码质量的。 最后，需求是开发的前提，应该首先处理是否可行，然后才是关注自己的技术领域实现。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[微信小程序开发准备工作]]></title>
    <url>%2F2018%2F07%2F25%2F%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[平时虽然是负责开发的，但是准备工作方面也有要做的。 1，个人也可以发布小程序，官方有提供几个分类供个人选择。 2，小程序必须通过微信认证才能使用微信支付。 3，小程序和公众号绑定，可以主体不一致，只是绑定数量有限制。 4,微信支付商户号和小程序主体必须一致]]></content>
      <categories>
        <category>微信开发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F07%2F25%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
